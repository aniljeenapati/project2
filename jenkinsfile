pipeline {
    agent any
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-sa')
        
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/aniljeenapati/project2.git'
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'gcp-sa', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Wait for VM to be ready') {
            steps {
                sleep(time: 30, unit: "SECONDS")
            }
        }
        stage('Create Ansible Inventory') {
            steps {
                script {
                    // Clear and prepare inventory file
                    sh '''
                    mkdir -p /var/lib/jenkins/workspace/loadbalancer
                    > /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml  # Clear file content

                    INSTANCE_IDS=$(gcloud compute instance-groups managed list-instances apache-instance-group --zone us-central1-a --project primal-gear-436812-t0 --format="value(instance)")

                    for INSTANCE_ID in $INSTANCE_IDS; do
                        INSTANCE_IP=$(gcloud compute instances describe $INSTANCE_ID --zone us-central1-a --project primal-gear-436812-t0 --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
                        
                        echo "$${INSTANCE_ID}:" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                        echo "  hosts:" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                        echo "    web_$${INSTANCE_ID}:" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                        echo "      ansible_host: $${INSTANCE_IP}" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                        echo "      ansible_user: centos" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                        echo "      ansible_ssh_private_key_file: /root/.ssh/id_rsa" >> /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml
                    done
                    '''
                }
            }
        }
        stage('Add Host Keys to SSH Known Hosts') {
            steps {
                script {
                    def instanceIps = sh(script: "awk '/ansible_host/ {print \$2}' /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml", returnStdout: true).trim().split('\n')

                    for (ip in instanceIps) {
                        sh "ssh-keyscan -H ${ip} >> ~/.ssh/known_hosts || true"
                    }
                }
            }
        }
        stage('Install Apache using Ansible') {
            steps {
                sh 'ansible-playbook -i /var/lib/jenkins/workspace/loadbalancer/inventory.gcp.yml /var/lib/jenkins/workspace/loadbalancer/apache_install.yml'
            }
        }
    }
}
