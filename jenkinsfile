pipeline {
    agent any

    stages {
        stage('Terraform Init') {
            steps {
                script {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Generate and Update Ansible Inventory') {
            steps {
                script {
                    def vmIpsJson = sh(script: 'terraform output -json vm_ips', returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def vmIps = jsonSlurper.parseText(vmIpsJson)

                    def inventoryContent = ""
                    vmIps.each { ip ->
                        inventoryContent += "${ip}\n"
                    }

                    writeFile file: 'inventory/hosts', text: inventoryContent
                    echo "Generated Ansible Inventory:\n${inventoryContent}"
                }
            }
        }

        stage('Add SSH Host Keys') {
            steps {
                script {
                    // Loop through each IP and add it to known_hosts
                    def vmIpsJson = sh(script: 'terraform output -json vm_ips', returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def vmIps = jsonSlurper.parseText(vmIpsJson)

                    vmIps.each { ip ->
                        sh "ssh-keyscan -H ${ip} >> ~/.ssh/known_hosts"
                    }
                }
            }
        }

        stage('Install Apache using Ansible') {
            steps {
                script {
                    sh 'ansible-playbook -i inventory/hosts install_apache.yml'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
