pipeline {
    agent any

    environment {
        // Define environment variables if necessary
    }

    stages {
        stage('Terraform Init') {
            steps {
                script {
                    // Initialize Terraform
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Apply Terraform configuration
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Generate and Update Ansible Inventory') {
            steps {
                script {
                    // Get the VM IPs output from Terraform
                    def vmIpsJson = sh(script: 'terraform output -json vm_ips', returnStdout: true).trim()
                    
                    // Write the IPs to an inventory file
                    writeFile file: 'inventory/hosts', text: vmIpsJson

                    // Optional: Display the inventory file content
                    echo "Generated Ansible Inventory:\n${vmIpsJson}"
                }
            }
        }

        stage('Add Host Key') {
            steps {
                script {
                    // Add SSH keys or any host key management logic here
                    echo 'Adding host keys...'
                }
            }
        }

        stage('Install Apache using Ansible') {
            steps {
                script {
                    // Run Ansible playbook to install Apache
                    sh 'ansible-playbook -i inventory/hosts install_apache.yml'
                }
            }
        }
    }

    post {
        always {
            // Clean up actions or notifications
            echo 'Cleaning up...'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}
